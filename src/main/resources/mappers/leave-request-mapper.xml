<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kedu.project.dao.LeaveRequestDAO">

  <!-- 1. 잔여 연차 조회 -->
  <select id="selectRemainLeave" parameterType="string" resultType="double">
    SELECT NVL(userLeave, 0)
    FROM leave_balance
    WHERE id = #{memberId}
  </select>

  <!-- 2. 휴가 신청 INSERT -->
  <insert id="insertLeaveRequest" parameterType="com.kedu.project.dto.LeaveRequestDTO">
    INSERT INTO leave_request (
      seq, member_id, leave_count, leave_code,
      start_leave_time, end_leave_time, reason, status, approval_id
    ) VALUES (
      leave_request_seq.NEXTVAL,
      #{member_id}, #{leave_count}, #{leave_code},
      #{start_leave_time}, #{end_leave_time}, #{reason}, #{status}, #{approval_id}
    )
  </insert>

  <!-- ✅ 3. 승인된 연차 차감 -->
  <update id="updateUsedLeave">
    MERGE INTO leave_balance lb
    USING (SELECT #{memberId} AS id FROM dual) d
    ON (lb.id = d.id)
    WHEN MATCHED THEN
      UPDATE SET userLeave = NVL(lb.userLeave, 0) + #{used}
    WHEN NOT MATCHED THEN
      INSERT (id, userLeave) VALUES (#{memberId}, #{used})
  </update>
  
  
  <update id="updateLeaveStatus">
    UPDATE LEAVE_REQUEST
    SET STATUS = #{status}
    WHERE SEQ = #{seq}
	</update>
	
	




<select id="selectLeaveStatus"
        parameterType="map"
        resultType="com.kedu.project.dto.LeaveStatusDTO">

  SELECT
      lr.seq,
      lr.member_id AS memberId,
      m.name AS memberName,         
      m.rank_code AS rankCode,      
      lr.leave_code AS leaveCode,
      lr.reason AS reason,
      lr.status AS status,
      lr.approval_id AS approvalId,
      TO_CHAR(lr.start_leave_time, 'YYYY-MM-DD HH24:MI:SS') AS startLeaveTime,
      TO_CHAR(lr.end_leave_time, 'YYYY-MM-DD HH24:MI:SS') AS endLeaveTime,
      lr.reject_reason AS rejectReason,
      TO_CHAR(lr.reject_time, 'YYYY-MM-DD HH24:MI:SS') AS rejectTime
  FROM leave_request lr
  JOIN member m ON lr.member_id = m.id      
  <where>

    <!-- ✅ 과장 이상은 전체 조회 -->
    <if test="rankCode.trim() == '과장' 
         or rankCode.trim() == '부장' 
         or rankCode.trim() == '이사' 
         or rankCode.trim() == '부사장' 
         or rankCode.trim() == '사장'">
      <!-- 조건 없음 -->
    </if>

    <!-- ✅ 그 외는 본인 것만 -->
    <if test="rankCode.trim() != '과장' 
         and rankCode.trim() != '부장' 
         and rankCode.trim() != '이사' 
         and rankCode.trim() != '부사장' 
         and rankCode.trim() != '사장'">
      AND lr.member_id = #{memberId}
    </if>

  </where>

  ORDER BY lr.start_leave_time DESC

</select>


<select id="getLeaveCount" resultType="double">
    SELECT LEAVE_COUNT
    FROM LEAVE_REQUEST
    WHERE SEQ = #{seq}
</select>

<select id="selectRequesterId" resultType="string">
    SELECT member_id
    FROM leave_request
    WHERE seq = #{seq}
</select>

</mapper>
